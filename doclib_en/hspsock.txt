------------------------------------------------------------------------------
HSPSOCK ver3.4   REFERENCE MANUAL                   HSP : Hot Soup Processor
HSP Extension DLL Reference             copyright 1999-2014 (c) onion software
------------------------------------------------------------------------------

ÅEIntroduction

	This DLL is a plugin module that, when used with Hot Soup Processor ver3 or later, allows for various
	functional extensions.
	By using this extension DLL, new commands are added, and TCP/IP socket communication
	functions can be controlled from HSP.
	These commands are useful for creating tools and utilities that cannot be achieved with HSP alone,
	and enable more advanced application development.


ÅEInstallation

	Place the extension plugin file, HSPSOCK.DLL, in the same directory as HSED3.EXE and HSP3.EXE.
	(An error will occur if HSPSOCK.DLL is not in the same directory as the HSP3.EXE being used for execution.)
	Also, when creating a script, place HSPSOCK.AS in the same directory as the script and
	be sure to add the line "#include "hspsock.as"" to the beginning of the script.
	With this, HSP's functionality will be extended, and you will be able to use the commands described in this reference.
	First, try running the included sample script.
	You should be able to see a simple example of how to use the extended functions.


ÅENotes

	HSPSOCK.DLL is a plugin file that is used simultaneously with HSP3.EXE.
	Even if you create an EXE file, it will not work unless you place HSPSOCK.DLL in the same directory as the EXE file.
	Also, you cannot add DLLs to a packfile.


ÅECopyright and Contact Information

	The rights to original software (executable files) created by users using HSP
	belong to the user who created them.
	HSPSOCK.DLL can be freely distributed whether for a fee or free of charge, and there is no obligation to display the onion software copyright notice.
	Onion software does not claim copyright to original software created by users.

	The HSPSOCK plugin is the copyrighted work of onion software.
	Onion software makes no warranty for any damages caused by this program.
	Use it at your own risk.
	HSPDB.DLL is compiled with Microsoft Visual C++ 7.1.


ÅECommand List

	sockopen p1,"url",p2			Initialize the socket and connect
	sockclose p1					Disconnect the socket
	sockput "message",p1			Send data
	sockputc p1,p2					Send data 1 byte
	sockputb p1,p2,p3,p4			Send buffer data
	sockget p1,p2,p3				Receive data
	sockgetc p1,p2					Receive data 1 byte
	sockgetb p1,p2,p3,p4			Receive data into the buffer
	sockmake p1,p2					Initialize the socket as a server
	sockwait p1,p2					Wait for client connection
	sockcheck p1					Check for data arrival
	ipget							Get host IP address


ÅETCP/IP Socket Communication Commands

	This is a set of commands for performing communication over a LAN or the Internet via PPP.
	You can access networks connected by the TCP/IP protocol using sockets, not just the Internet.
	This allows you to create clients for HTTP, FTP, TELNET, etc.
	As of the current version, asynchronous communication and server functionality are not supported.

	When performing TCP/IP communication, you must always initialize it first.
	To initialize as a server, use the sockmake command, and to initialize as a client,
	use the sockopen command.
	In either case, be sure to disconnect with the sockclose command when communication is finished.
	Also, sockets have IDs from 0 to 31, and multiple sockets can be used simultaneously.
	For details on TCP/IP communication and protocols, please refer to specialized books and documents.


	sockopen p1,"url",p2			Initialize the socket and connect

	p1=0Å`31(0)  : Socket ID number
	"url"       : URL specification string
	p2=0Å`(0)   : Port number

	ÅEDescription

		Initializes the socket to make it usable.
		When performing TCP/IP communication, you must always initialize and connect to the other server.
		Specify the socket ID number with p1.
		Specify the URL of the connection destination as a string in "url". This can be either a domain name such as "www.yahoo.co.jp"
		or an IP address directly specified as "202.132.50.7".
		Do not include scheme names such as "http://" or "ftp://".
		Specify the port number to connect to with p2. This depends on what server you are connecting to.
		If you are creating an original port, be sure to use 1024 or later.
		The result of the sockopen command being executed is assigned to the system variable stat.
		If the result is an error, it will be a value other than 0. If an error occurs during initialization,
		communication is not possible.
		Details of the values of the system variable stat are as follows:

		  stat    Error Content
		  --------------------------------
		   1    : TCP/IP is not installed in Windows
		   2    : Socket initialization failed
		   3    : Failed to get server name from URL
		   4    : Failed to connect to the server

	sockclose p1				Disconnect the socket

	p1=0Å`31(0)  : Socket ID number

	ÅEDescription

		Disconnects the connected socket.
		Be sure to disconnect initialized sockets with the sockclose command.

	sockput "message",p1			Send data

	"message"   : Message to send
	p1=0Å`31(0)  : Socket ID number

	ÅEDescription

		Sends data to the socket. Sends the string specified in "message" or
		the contents of the string type variable as is.
		If an error occurs during transmission, a value other than 0 is assigned to the system variable stat.

	sockputc p1,p2				Send data 1 byte

	p1=0Å`255(0) : Message to send (1 byte)
	p2=0Å`31(0)   : Socket ID number

	ÅEDescription

		Sends data to the socket. Sends the numeric value specified in p1 as 1 byte.
		If an error occurs during transmission, a value other than 0 is assigned to the system variable stat.

	sockputb p1,p2,p3,p4		Send buffer data

	p1=Variable     : Variable name containing the content to be sent
	p2=0Å`(0)   : Buffer offset (in bytes)
	p3=0Å`(64)  : Send size (in bytes)
	p4=0Å`31(0)  : Socket ID number

	ÅEDescription

		Sends the contents of the variable buffer specified in p1 as binary data to the socket.
		The variable specified in p1 can be either a string type or a numeric type.
		The contents of the memory that the variable has secured are sent directly.
		You can specify the offset of the variable buffer with p2.
		For example, if p2 is 100, the contents from the 100th byte from the beginning will be sent.
		If p2 is omitted, it defaults to 0.
		Specify the send size with p3.
		The send size must be within the size that has been secured in advance for the variable buffer.
		If p3 is omitted or 0, 64 (bytes) is specified.
		After the sockputb command is executed, the system variable stat is assigned the actually sent
		size (in bytes). If the contents of the system variable stat were 0,
		it indicates that there was a communication error or that nothing was sent due to a timeout.
		(The contents of the variable buffer can be manipulated using the peek function, poke command, etc.)

	sockget p1,p2,p3			Receive data

	p1=Variable     : Variable name where the received content will be stored
	p2=0Å`(64)  : Receive size (in bytes)
	p3=0Å`31(0)  : Socket ID number

	ÅEDescription

		Receives data from the socket and assigns the contents to the string type variable specified in p1.
		Specify the maximum receive size with p2.
		If an error occurs during reception, a value other than 0 is assigned to the system variable stat.

	sockgetc p1,p2				Receive data 1 byte

	p1=Variable     : Variable name where the received content will be stored
	p3=0Å`31(0)  : Socket ID number

	ÅEDescription

		Receives 1 byte of data from the socket and assigns the contents to the numeric type variable specified in p1.
		If an error occurs during reception, a value other than 0 is assigned to the system variable stat.

	sockgetb p1,p2,p3,p4		Receive data into the buffer

	p1=Variable     : Variable name where the received content will be stored
	p2=0Å`(0)   : Buffer offset (in bytes)
	p3=0Å`(64)  : Receive size (in bytes)
	p4=0Å`31(0)  : Socket ID number

	ÅEDescription

		Receives data from the socket and stores the contents as binary data in the variable buffer specified in p1.
		The variable specified in p1 can be either a string type or a numeric type.
		The received content is read directly into the memory secured by the variable.

		You can specify the offset of the buffer to be stored with p2.
		For example, if p2 is 100, the received data will be stored from the 100th byte from the beginning.
		If p2 is omitted, it defaults to 0.
		Specify the maximum receive size with p3.
		When specifying the receive size, enough memory must be secured in advance in the variable buffer to store the specified size.
		If p3 is omitted or 0, 64 (bytes) is specified.
		After the sockgetb command is executed, the system variable stat is assigned the actually received
		size (in bytes). If the contents of the system variable stat were 0,
		it indicates that there was a communication error or that nothing was received due to a timeout.
		(The contents of the variable buffer can be manipulated using the peek command, poke command, etc.)

	sockmake p1,p2				Initialize the socket as a server

	p1=0Å`31(0)  : Socket ID number
	p2=0Å`(0)   : Port number

	ÅEDescription

		Initializes the socket to make it usable as a server.
		Specify the socket ID number with p1.
		Specify the port number with p2. Socket numbers that are already reserved by the system cannot be used.
		When defining your own protocol, you should use a number after 1024.
		When the sockmake command is executed, preparation as a server is complete.
		After this, in order to actually connect to the client, you need to wait for the client's connection to be completed with the sockwait command.

If the result is an error, a non-zero value is returned. If an error occurs during initialization, communication is not possible. The details of the system variable `stat` values are as follows:

  stat    Error Description
  --------------------------------
   1    : TCP/IP is not installed on Windows.
   2    : Socket initialization failed.
   3    : Socket binding failed.


	sockwait p1,p2					Wait for client connection

	p1=0Å`31(0)  : Socket ID number
	p2=0Å`31(0)  : Alternate Socket ID number

	ÅEDescription

		Waits for a client connection on a socket that has been prepared as a server using the `sockmake` command. The `sockwait` command must be executed after the `sockmake` command has completed successfully.

		The `sockwait` command returns a non-zero value in the system variable `stat` if there is no client connection or if an error occurs. Only when 0 is assigned to the system variable `stat` does the connection to the client succeed, allowing communication using commands such as `sockget` and `sockput`.

		To wait for an incoming connection as a server, initialize the socket as a server with the `sockmake` command, and then wait in a loop with the `sockwait` command until the system variable `stat` becomes 0. In this case, you must include `wait` or `await` commands in the loop to allow other Windows applications to process tasks. Otherwise, other Windows applications may not receive processing time.

		If `p2` is 0 or omitted, communication with the client is possible through the socket ID number specified by `p1`. If a non-zero value is specified for `p2`, communication with the incoming client can be performed through the alternate socket ID specified by `p2`. In this case, the socket ID number specified by `p1` can continue to perform server operations using the `sockmake` command. If you want to accept multiple client connections on the same port, use the alternate socket ID number.

		If the result is an error, a non-zero value is returned. If an error occurs, communication is not possible. The details of the system variable `stat` values are as follows:

		  stat    Error Description
		  --------------------------------
		   1    : No connection request from the client.
		   2    : Server preparation with the `sockmake` command has not been completed.
		   3    : Socket is not in a receiving state.
		   4    : Failed to put the socket into a receiving state.
		   5    : Failed to connect to the client.


	ipget						Get the host's IP address

	ÅEDescription

		Gets the host's IP address and assigns it to the system variable `refstr`. If an error occurs while getting the IP address, 1 is assigned to the system variable `stat`. If the IP address is successfully retrieved, the value of the system variable `stat` becomes 0.


	sockcheck p1					Check for data arrival

	p1=0Å`31(0)  : Socket ID number

	ÅEDescription

		Checks whether data that can be obtained with `sockget`-type commands has arrived on the specified socket.
		If receivable data is available, 0 is assigned to the system variable `stat`. If no data has arrived, the system variable `stat` becomes 1.

		If a communication error occurs, the system variable `stat` becomes a value of 2 or greater. If an error occurs, communication is not possible.

		The details of the system variable `stat` values are as follows:

		  stat    Content
		  --------------------------------
		   0    : Receive data has arrived.
		   1    : Receive data has not arrived (timeout).
		   2    : An error occurred during communication.

		`sockcheck` only checks for the arrival of data. To retrieve the actual data, you need to receive it with commands such as `sockget`, `sockgetc`, or `sockgetb`.


-------------------------------------------------------------------------------
                                                HSP users manual / end of file
-------------------------------------------------------------------------------
