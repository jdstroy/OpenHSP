------------------------------------------------------------------------------
HSPCMP ver3.7                                       HSP : Hot Soup Processor  
HSP3 Code Compiler                  copyright 1999-2023 (c) onion software  
------------------------------------------------------------------------------

・Introduction

	The HSP3 code compiler is a feature that converts HSP scripts for Hot Soup Processor ver3 and later into intermediate code (object files) that can be executed by the HSP runtime.
	The Windows DLL version is provided as hspcmp.dll.
	(This DLL is used by the script editor and can also be used to call functions from HSP scripts.  When used as an HSP extension plugin, it must be located in the same directory as HSP3.EXE and HSED3.EXE.)

	A command-line version is available as hspcmp.exe (hspcmp for Linux).


・Calling from the Command Line

	You can execute hspcmp.exe (or hspcmp for Linux) from the command prompt (or shell).

	The calling format is as follows:

	hspcmp [options] [filename]

	Options list

	       -o???  Specifies the name of the output object file (.ax) as ???
	       -d     Generates an object file with debugging information
	       -p     Performs preprocessing only
	       -c     Compiles in HSP2.55 compatible mode
	       -i     Reads a script in UTF-8 format
	       -u     Outputs string data in UTF-8 format
	       -j     Reads a script in UTF-8 format and automatically selects the output format
	       -w     Sets the debug window display flag
	       -s     Outputs a string data file (strmap)
	       -m     Compiles as a script for Emscripten
	       -e0,e1,r0,r1        Executes the object file
                                   (e0,r0 only display the runtime name)
                                   (r,r1 include error code confirmation)

	       -h???   Displays keyword help for ??? (Linux version only)
	       -lk???  Displays the HSP3 keyword list (??? is the search keyword)
	       -ll???  Performs source analysis and extracts the line defining the label indicated by ???
	       -lv???  Performs source analysis and extracts the line defining the variable indicated by ???
	       -ls???  Performs source analysis and extracts the line defining the keyword indicated by ???
	       -lr     Extracts the referenced lines during source analysis
	       -lp     Includes keywords that partially match in the extraction

	       --syspath=??? Specifies the HSP system folder at runtime
	       --compath=??? Specifies the path to the common folder

	By using the hspcmp tool, you can compile and execute HSP scripts from the command line.

		Example:
		hspcmp -d -oout.ax test1.hsp

		Compiles test1.hsp and outputs the object file including debugging information as out.ax.

		Example:
		hspcmp -e test1.ax

		Executes the object file test1.ax with the HSP runtime.


・Calling from a Script

	To call the DLL from an HSP script, add the following line to the beginning of the script:

	#include "hspcmp.as"

	After that, commands will be added and the functions of the HSP code compiler will be available.


・Command Details

	hsc_ini "filename"

		Initializes HSPCMP.DLL.
		You must initialize HSPCMP.DLL before using its functions.
		"filename" specifies the file to be compiled.
		Specify the file name including the extension (it doesn't have to be as).

	hsc_refname "filename"

		Specifies the source script file name displayed in error messages.
		This is for cases when you temporarily save "test.as" as "hsptmp" and compile it, but want the error message to indicate that the error occurred in the "test.as" file.
		If the source script file name does not need to be changed from the file specified in hsc_ini, you do not need to specify it.

	hsc_objname "filename"

		Specifies the output object file name.

	hsc_compath "pathname"

		Specifies the common directory that is searched for #include.
		"pathname" must be a string ending with "\".
		If hsc_compath is not specified, the "common" directory under the EXE that is using hspcmp.dll is referenced.

	hsc_comp p1,p2,p3

		Compiles the source file with the HSP code compiler and creates an object file.
		The p1 parameter specifies whether to output debugging information to the object file.

		If p1 is 0 or omitted, the debugging information necessary for displaying error lines, etc., is not added to the object file.
		If p1 is 1 (bit0), debugging information is added.
		If p1 is 2 (bit1), only preprocessing is performed.
		If p1 is 4 (bit2), string data is converted to UTF-8 code and output.
		If p1 is 8 (bit3), the string data file (strmap) being used is output.
		If p1 is 16 (bit4), the source analysis list is output. (You need to configure this in advance with the hsc3_analysis command.)
		If p1 is 32 (bit5), the character code of the source script is input as UTF-8.
		If p1 is 256 (bit8), the source script is compiled for Emscripten (html5/js).
		If p2 is 0, compilation is performed with the "__hsp30__" macro defined.
		If p2 is 1, the macro is not defined. This is to pass the script editor's "Use HSP extension macros" flag to the compiler.
		Adding +4 (bit2) to the value of p2 creates a packfile based on the commands (#pack, #epack, #packopt) for automatic executable file creation included in the source.
		If p3 is other than 0, the flag to display the debug window is embedded in the object file.
		To execute the hsc_comp command, you must first initialize it and specify the file with the hsc_ini command.
		Also, if necessary, specify the object file name to be output with hsc_objname.
		(The output file name defaults to the file name specified in hdc_ini with the extension ".ax")
		Furthermore, if necessary, execute the hsc_refname command in advance. The compilation procedure is as follows:

			1. "hsc_ini"
					↓
			2. "hsc_refname" (optional)
					↓
			3. "hsc_objname" (optional)
					↓
			4. "hsc_comp"

		like this.

	hsc_getmes p1

		Assigns the message output by HSPCMP.DLL, such as errors, to the string variable specified by p1.

	hsc_clrmes

		Clears all message data output by the compiler.

	hsc_ver

		Returns the version information of the HSP code compiler as a string to the system variable refstr.

	hsc_bye

		Performs the termination process of the HSP code compiler.
		This command is executed automatically, so it is usually not used.

	pack_ini "filename"

		Initializes the PACKFILE manager.
		When performing PACKFILE operations (commands starting with "pack_"), you need to initialize first.
		"filename" specifies the file to be operated on.
		Specify the file name without the extension.

	pack_view

		Displays the content list of the file specified by pack_ini as a DPM file.
		The result of pack_view should be obtained with the hsc_getmes command.

	pack_make p1,p2

		p1 = 0=for standard EXE files / 1=for external DPM files
		p2 : Encryption key (0=use standard key / other=encryption key)

		Creates a DPM file with the file name specified by pack_ini.
		You need to specify whether it is for standard EXE files or DPM files for external reading with p1.
		Also, when creating a DPM file, you can configure the encryption key with p2.
		If you specify 0 for p2, a DPM file with standard encryption (2.61 compatible) is created.
		If you specify a value other than 0 for p2, encryption is performed using that value as the key.
		In this case, be careful because the same key value must be specified by the chdpm command on the script side when reading the DPM file, otherwise it will not be decrypted as a correct file.
		The files to be included in the DPM file are the files specified in the text file "PACKFILE" in the current directory.

	pack_exe p1

		p1 = 0=standard / 1=full screen mode / 2=screen saver

		Creates an EXE file with the file name specified by pack_ini.
		You can specify three modes (standard, full screen, screen saver) with p1.
		The files to be included in the EXE file are the files specified in the text file "PACKFILE" in the current directory.
		Also, the HSP runtime file (hsprt) needs to be located in the appropriate directory.

	pack_opt p1,p2,p3

		p1 = Screen X size (0 or omitted = 640)
		p2 = Screen Y size (0 or omitted = 480)
		p3 = Startup operation switch

		Specifies options for creating EXE files with the pack_exe command.
		You need to specify it before executing the pack_exe command.
		You can specify special startup operations by specifying the following values for the startup operation switch specified by p3:

			1 = Initial window hidden
			2 = No directory movement

		You can select functions simultaneously by adding the operation switches.
		If you do not need any special operations, specify 0.

	pack_rt "filename"

		Specifies the full path name of the HSP runtime file (hsprt) that is referenced when creating an EXE file with the pack_exe command.
		If the HSP runtime file is not in the current directory, please specify it.
		(Example: pack_rt "c:\hsp\hsprt")

	pack_get "filename"

		Extracts the stored file from the file specified by pack_ini as a DPM file.
		The file specified by "filename" is extracted and saved in the current directory.
## hsc3_getsym

Outputs the symbol names used in HSP to the compiler's message buffer.
The output format is "symbol name,sys[|var/func/macro][|1/2]".

## hsc3_messize val

Assigns the total size of the message obtained by hsc_getmes to the variable specified by val.

## hsc3_make "path"

Performs automatic creation of the executable file.
Specify the full path to the HSP runtime library with "path".
Creates the executable file according to the packfile options.
Packfile creation with options is done with hsc_comp.

## hsc3_getruntime val, "objfile"

Obtains the runtime file name required by the object file specified by "objfile" and assigns it to the variable specified by val.
The variable val must be initialized as a string.
If the runtime file name is empty (""), it indicates that the default runtime (hsp3.exe) should be used.

## hsc3_run "string"

Processes the content of "string" as a command line for runtime execution.
"string" must specify "runtime name", "object file name", and "startup options" separated by spaces.

## hsc3_analysis "keyword", mode

Configures settings for outputting a source analysis list with the hsc_comp command.
Source analysis allows you to retrieve a list of used variables and labels as text.
The "keyword" parameter specifies the target keyword. This allows you to output only items with specific names. To output all names, specify an empty string ("").
The mode parameter specifies the analysis mode.
For details, refer to the keyword help.

## hsc3_kwlbuf var, p1

Retrieves the result of the HSP3 source analysis set by the hsc3_analysis command.
The variable specified by var must be pre-allocated as a string type buffer.
Specifying the buffer size with the p1 parameter checks whether it fits within the result size.
If the p1 parameter is 0 or omitted, the data is copied directly into the buffer.
To check the required buffer size in advance, use the hsc3_kwlsize command.

## hsc3_kwlsize var

Obtains the buffer size required to retrieve the result of the HSP3 source analysis set by the hsc3_analysis command.
The size is assigned to the integer variable specified by var.
To actually retrieve the data, use the hsc3_kwlbuf command.

## hsc3_kwlclose

Discards the result of the HSP3 source analysis set by the hsc3_analysis command.
Note that you must discard the analysis result with the hsc3_kwlclose command after source analysis.

## Notes

HSPCMP.DLL can be used as a plugin file for HSP3.
When used as a plugin, HSPCMP.DLL must be placed in the same directory as the EXE file for it to work, even when an EXE file is created.
Also, DLLs cannot be added to the packfile.

If you have any comments or opinions about this version, please send them to us by email or on the HSP bulletin board.

## Copyright and License

The copyright of HSPCMP.DLL belongs to onion software.
onion software does not guarantee any damages caused by this program. Use it at your own risk.

HSPCMP.DLL can be freely attached, copied, modified, and redistributed.
However, in that case, be sure to clearly state the HSP license notation (hsplicense.txt).
(Clarification of the license notation should include hsplicense.txt in the distribution or include the same content as hsplicense.txt in the documentation.)

For details on the license, please refer to the HSP system documentation.

---------------------------------------------------------------------------
## Appendix: How to compile a script from HSP

---------------------------------------------------------------------------

The following is an example of calling HSPCMP.DLL from an HSP script.
The following performs the same operation as "Compile + Execute" in the script editor.

#include "hspcmp.as"

;
;	Compiles and executes an HSP3 source script
;
sdim mesbuf,$10000
sdim rtname,256

fname="test1.as"		; Script file name
objname="obj"			; Object file name
debug_mode=0			; Debug window display flag

hsc_ini fname
hsc_objname objname
hsc_comp 0,2,debug_mode
res=stat:if res!=0 : dialog "ERROR" : goto *goerror

delete fname+".i"		; Delete intermediate file

hsc3_getruntime rtname, objname
if rtname="" : rtname="hsp3.exe"

cmdexe = "\""+dir_exe+"\\"+rtname+"\" "+objname
hsc3_run cmdexe

*goerror
hsc_getmes mesbuf

objmode 1
flg=1				; 0=non-editable/1=editable
mesbox mesbuf,636,446,flg+4

stop

---------------------------------------------------------------------------
## Appendix: How to call HSP extension plugins from a C program

---------------------------------------------------------------------------

This section describes how to call HSPCMP.DLL from a C program.
Other extension plugins can also be accessed in basically the same way.
The example list is used in Visual C++.

## Caller side

The list below is the part that links HSPCMP.DLL and defines the functions.
A function of type DLLFUNC is defined and used.
The argument is (int,int,int,int), but any type with four calling parameters (size is 4 bytes) is fine.
In the example below, calling dll_ini allows each function starting with hsc_ to be used, and calling dll_bye releases it. (Here, hsc_bye is called at the time of release.)

/*
		DLL support routines
*/

typedef BOOL (CALLBACK *DLLFUNC)(int,int,int,int);

DLLFUNC hsc_ini;
DLLFUNC hsc_refname;
DLLFUNC hsc_objname;
DLLFUNC hsc_comp;
DLLFUNC hsc_getmes;
DLLFUNC hsc_clrmes;
DLLFUNC hsc_ver;
DLLFUNC hsc_bye;
DLLFUNC pack_ini;
DLLFUNC pack_make;
DLLFUNC pack_exe;
DLLFUNC pack_opt;
DLLFUNC pack_rt;
DLLFUNC hsc3_getsym;
DLLFUNC hsc3_make;
DLLFUNC hsc3_getruntime;		// Added for 3.0
DLLFUNC hsc3_run;				// Added for 3.0

static	int dllflg=0;			// DLL uses flag
static	HINSTANCE hDLL;			// Handle to DLL

static char *SetDllFunc( char *name )
{
	//		Assign DLL function
	//
	char *ent;
	char fncname[128];
	fncname[0]='_';
	strcpy( fncname+1,name );
	strcat( fncname,"@16" );
	ent = (char *)GetProcAddress( hDLL, fncname );
	if (ent==NULL) dllflg=-1;				// error flag
	return ent;
}


int dll_ini( char *libname )
{
	//		Initalize DLL entry
	//			(result:1=ok)
	//
	hDLL = LoadLibrary( libname );
	if ( hDLL==NULL ) return 0;

	dllflg=1;
	hsc_ini = (DLLFUNC)SetDllFunc("hsc_ini");
	hsc_refname = (DLLFUNC)SetDllFunc("hsc_refname");
	hsc_objname = (DLLFUNC)SetDllFunc("hsc_objname");
	hsc_comp = (DLLFUNC)SetDllFunc("hsc_comp");
	hsc_getmes = (DLLFUNC)SetDllFunc("hsc_getmes");
	hsc_clrmes = (DLLFUNC)SetDllFunc("hsc_clrmes");
	hsc_ver = (DLLFUNC)SetDllFunc("hsc_ver");
	hsc_bye = (DLLFUNC)SetDllFunc("hsc_bye");
	pack_ini = (DLLFUNC)SetDllFunc("pack_ini");
	pack_make = (DLLFUNC)SetDllFunc("pack_make");
	pack_exe = (DLLFUNC)SetDllFunc("pack_exe");
	pack_opt = (DLLFUNC)SetDllFunc("pack_opt");
	pack_rt = (DLLFUNC)SetDllFunc("pack_rt");
	hsc3_getsym = (DLLFUNC)SetDllFunc("hsc3_getsym");
	hsc3_make = (DLLFUNC)SetDllFunc("hsc3_make");
	hsc3_getruntime = (DLLFUNC)SetDllFunc("hsc3_getruntime");		// Added for 3.0
	hsc3_run = (DLLFUNC)SetDllFunc("hsc3_run");						// Added for 3.0

	return dllflg;
}


void dll_bye( void )
{
	//		Release DLL entry
	//
	if (dllflg==0) return;
	if (dllflg==1) {
		hsc_bye(0,0,0,0);					// Cleanup routine
	}
	FreeLibrary( hDLL );
	dllflg=0;
}

## Compiling and executing files using HSPCMP.DLL

The following example shows how to compile and execute files.
For details on commands starting with hsc_, refer to the command reference.
The general flow is to specify the source script with hsc_ini and then specify the output object file with hsc_objname.
After that, the file is compiled with hsc_comp.
If there is an error, you can retrieve the message data with hsc_getmes.
If there are no errors, the runtime is called and executed.
In the example below, the directory is not specifically specified, but in practice, it is recommended to specify it with a path that includes the directory where the runtime is located, the path to the source script, and so on.

/*
			HSP compile support routines
	*/

	char hsp_file[128];				// Source script file name
	char objname[128];				// Object file name
	char errbuf[32000];				// Area for storing error messages
	char cfname[_MAX_PATH];				// Runtime file name
	char execmd[2048];				// Execution string
	int a,i;

	//		Compile as file
	//
	strcat( hsp_file,"test.as" );
	strcat( objname,"test.ax" );
	hsc_ini( 0,(int)hsp_file, 0,0 );
	hsc_objname( 0,(int)objname, 0,0 );
	a=hsc_comp( 1,0,0,0 );
	if (a) {
		hsc_getmes( (int)errbuf,0,0,0 );	// Get the error
	}

	//		execute HSP3 process
	//
	*cfname = 0;
	hsc3_getruntime( (int)cfname, (int)objname, 0, 0 );	// Get the runtime
	if ( *cfname == 0 ) {
		wsprintf( execmd,"%s ", "hsp3.exe" );
	} else {
		wsprintf( execmd,"%s ", cfname );
	}

	strcat( execmd,objname );
	if (hsp_cmdopt[0]!=0) {
		strcat( execmd," " );
		strcat( execmd,hsp_cmdopt );		// If there is a command line option
	}

	i = hsc3_run( (int)execmd, 0, 0, 0 );
	if ( i ) {
		//	Error "Execution runtime file not found."
	}

-------------------------------------------------------------------------------
                                                HSP users manual / end of file
-------------------------------------------------------------------------------
